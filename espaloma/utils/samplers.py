import numpy as onp
from tqdm import tqdm


def langevin(x0, v0, log_prob_fun, grad_log_prob_fun, n_steps=100, stepsize=0.01, collision_rate=1e-5):
    """
    Parameters
    ----------
    x0 : array of floats
        initial configuration
    v0 : array of floats
        initial velocities
    log_prob_fun : callable, accepts an array and returns a float
        unnormalized log probability density function
    grad_log_prob_fun : callable, accepts an array and returns an array
        gradient of log_prob_fun
    n_steps : integer
        number of Langevin steps
    stepsize : float > 0
        finite timestep parameter
    collision_rate : float > 0
        controls the rate of interaction with the heat bath
    Returns
    -------
    traj : [n_steps + 1 x dim] array of floats
        trajectory of samples generated by Langevin dynamics
    log_probs : [n_steps + 1] array of floats
        log_prob_fun evaluated on every step
    """
    x = onp.array(x0)
    v = onp.array(v0)
    traj = [onp.array(x)]

    log_probs = [log_prob_fun(x)]

    force = grad_log_prob_fun

    a = onp.exp(- collision_rate * stepsize)
    b = onp.sqrt(1 - onp.exp(-2 * collision_rate * stepsize))

    F = force(x)

    trange = tqdm(range(n_steps))
    for _ in trange:
        # v
        v += (stepsize * 0.5) * F
        # r
        x += (stepsize * 0.5) * v
        # o
        v = (a * v) + (b * onp.random.randn(*x.shape))
        # r
        x += (stepsize * 0.5) * v

        F = force(x)
        # v
        v += (stepsize * 0.5) * F

        log_prob = log_prob_fun(x)
        trange.set_postfix({'|F|': onp.linalg.norm(F), '|x_t - x_0|': onp.linalg.norm(x - x0), 'log_prob': log_prob})
        # print(energy)

        traj.append(onp.array(x))
        log_probs.append(log_prob)

        if not onp.isfinite(x).all():
            print("Numerical instability encountered!")
            break

    return onp.array(traj), onp.array(log_probs)